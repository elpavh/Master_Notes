# Curso Definitivo HTML y CSS  ## Platzi

# Atajos VSC: 
    # (Control + k) + (control + c)  = Comentar lo seleccionado. 

    # Para seleccionar varias palabras iguales y modificarlas al mismo tiempo en VScode pueden usar control + D

# HTML: Estructura de los documentos que se visualizan en los navegadores Es el lenguaje con el que clasificamos o etiquetamos cada parte del documento, dej√°ndole saber al navegador qu√© informaci√≥n
    va a visualizar y qu√© valor tiene para nosotros. De esa manera, presentamos: Barras de Navegaci√≥n, Secciones, art√≠culos, listas, t√≠tulos de diferentes tama√±os, audios, videos, im√°genes, entre otros.

# CSS: Es el lenguaje con el que le damos estilos a todo el contenido previamente etiquetado con HTML. Es el encargado o usado para darle todo el aspecto visual de manera profesional, usando est√°ndares de 
    dise√±o de documentos y logrando as√≠ la correcta visualizaci√≥n de textos y recursos audiovisuales en formatos digitales o, en nuestro caso, las p√°ginas web.

# JavaScript: Es lenguaje que se emplea para crear o brindar a las p√°ginas web la capacidad de interactuar con el usuario y los recursos asociados a una p√°gina web, como lo son: bases de datos, servidores de 
    diversa √≠ndole, informaci√≥n derivada de la interacci√≥n de cada p√°gina en s√≠.



# Web Developer Fundamentals.
    # Perfiles de un Web Developer: Frond-end,

# Front-end: Frontend es la parte de un programa o dispositivo a la que un usuario puede acceder directamente. Son todas las tecnolog√≠as de dise√±o y desarrollo web que corren en el navegador y que se encargan 
    de la interactividad con los usuarios. https://www.w3.org/standards/   etiquetas: https://i.emezeta.com/weblog/html5-cheatsheet/html5-cheatsheet-2019.pdf

    # Estandares: HTML: https://devdocs.io/html/ , https://htmlreference.io/  CSS: https://devdocs.io/css/ , https://cssreference.io/ JavaScript: https://devdocs.io/javascript/ 

    # Frameworks de CSS: Bootstrap: https://getbootstrap.com/ , Foundation CSS: https://get.foundation/ , Materialize CSS: https://materializecss.com/ , Tailwind: https://tailwindcss.com/

    # Frameworks de Java Script para Front-end: React JS: https://es.reactjs.org/ , Angular JS: https://angular.io/ , Vue JS: https://vuejs.org/ 

    # Preprocesadores de CSS: Stylus: https://stylus-lang.com/ , SASS: https://sass-lang.com/

    # Compiladores / empaquetadores de JS: BABEL: https://babeljs.io/ , Webpack: https://webpack.js.org/

# Herramientas : Adem√°s de los est√°ndares, frameworks, preprocesadores y librer√≠as que maneja un Frontend Developer, estas herramientas que nos permiten un mejor desarrollo.

    # Mediaqueri: Algunas ideas sobre como deber√≠amos implementar el dise√±o responsive en nuestro sitio.  link: https://mediaqueri.es/

    # Coolors: Paletas de colores. link: https://coolors.co/palettes/trending
    
    # Unsplash: Imagenes gratis (Da los cr√©ditos a los fot√≥grafos üòâ). link: https://unsplash.com/es , https://pixabay.com/es/ , https://www.pexels.com/es-es/

    # FontPair: Ver cuales fuentes puedes combinar. Y obviamente Google Fonts para obtener esas fuentes. links: https://www.fontpair.co/fonts/anote , https://fonts.google.com/

    # Icons8: Iconos, vectores, m√∫sica y algunos recursos m√°s‚Ä¶ Link: https://icons8.com/ , https://fontawesome.com/

    # Browserdiet: Optimizar sitios web (Perder peso en la web üòõ). Recuerda que Platzi tiene tambi√©n un curso de Web Performance https://platzi.com/cursos/web-performance/

    # WCAG: Gu√≠a para mejorar la accesibilidad de nuestro sitio. Recuerda que Platzi tiene el curso de accesibilidad web. lnk: http://www.sidar.org/traducciones/wcag20/es/

    # Practica Jugando: Grid Layout: https://cssgridgarden.com/#es ,Flexbox https://flexboxfroggy.com/#es , https://flukeout.github.io/ , http://www.flexboxdefense.com/ , https://www.w3schools.com/ , https://css-tricks.com/

    # Convertidores: WEBP A PNG: https://imagen.online-convert.com/es/convertir/webp-a-png  QUITAR FONDO IMAGEN: https://es.clippingmagic.com/  QUITAR OBJETOS DE IMG:  https://theinpaint.com/

    # Comprimir imagenes: https://tinypng.com/ , https://www.iloveimg.com/es/comprimir-imagen/comprimir-jpg

    # Guias: https://losapuntesdemajo.vercel.app/


# Back-end:  programaci√≥n corresponde al lado opuesto a un Front-end en un sitio web o aplicaci√≥n, ya que el Backend trabaja en el lado del servidor, mientras el Frontend lo hace en el lado del cliente. Es el responsable de 
    manejar toda la l√≥gica que existe detr√°s de una petici√≥n dada por el navegador hacia el servidor. Existen programadores que manejan ambas especialidades y se les conoce como full stack.

    # Lenguajes de programacion: Node.js, Python, PHP, Ruby, GO, Java, .NET

    # Frameworks: Django (Python), Lavarel (PHP), Rails (Ruby), Express (JavaScript), Spring (Java)   

    # El Backend tambi√©n tiene en cuenta la infraestructura donde va a realizarse el deploy de su aplicaci√≥n (esto tambi√©n puede ser tarea de un DevOps, un perfil dedicado a la infraestructura), con tecnolog√≠as como:
        Google Cloud, DigitalOcean, AWS, Heroku, entre otras.
    
    # ¬øQu√© es deploy?: Deploy es un t√©rmino famoso entre los desarrolladores web. Puede significar muchas cosas, dependiendo del ambiente y de la tecnolog√≠a usada. Sin embargo, los significados que m√°s se refieren a la 
        pr√°ctica y pueden resumir su funci√≥n son: implantar, colocar en posici√≥n, habilitar para uso o, simplemente, publicar.
    
    # bases de datos: Bases de datos relacionales (como MySQL) y Bases de datos no relacionales (como mongoDB).



# Full Stack: es un t√©rmino utilizado para describir a los desarrolladores que conocen tanto los lenguajes de frontend como de backend. Principalmente, el desarrollo full stack se refiere al uso de JavaScript en el backend
     y de HTML/CSS/JavaScript en el frontend para crear nuevas plataformas.

    # Tecnolog√≠as Full Stack para desarrolladores: LAMP (Linux, Apache, MySQL, PHP) , MERN (MongoDB, Express.js, React, Node) , PERN (PostgreSQL, Express.js, React, Node)



# Pagina Estaticas vs Dinamicas.

    # Sitos Web Est√°ticos: La informaci√≥n que contiene se mantiene constante y est√°tica. No se actualiza con la interacci√≥n del usuario. Es conveniente para realizar landing pages (p√°ginas informativas o de aterrizaje) 
        o blogs. Se mostrar√°n siempre iguales para todos los usuarios. Ejemplos: Men√∫ de un restaurante, Blog de viajes, P√°gina informativa de un negocio.

    # Sitios Web Din√°micos: Tambi√©n conocidos como aplicaciones web, actualizan su informaci√≥n con respecto a la interacci√≥n del usuario. Dependen de una base de datos, de donde extrae e ingresa informaci√≥n. Ser√°n diferentes,
         dependiendo del usuario que la use y la informaci√≥n que se ingrese. Ejemplos: Sistema de reporte de ventas, Linkedin, Banca en l√≠nea



# HTML: anatom√≠a de una p√°gina web

    # Estructura b√°sica de HTML en una p√°gina Web

        # Container: contenedor principal

        # Header: cabecera de la p√°gina. Aqu√≠ usualmente encuentras el logo y el men√∫ de navegaci√≥n del sitio.

        # Main content: estructura principal. Por ejemplo, el feed o lista de publicaciones de una red social.

        # Sidebar: contenido secundario de una p√°gina, que usualmente se encuentra a los lados del contenido principal (o main).

        # Footer: pie de p√°gina. Esto se encuentra al fondo del sitio web, salvo en casos de sitios web donde el scroll (o navegaci√≥n hacia abajo) es infinito, por ende, no tendr√≠a sentido ponerlo al fondo.


    # Etiquetas del cuerpo del documento (body):

        # article: diferencia partes del contenido que pueden vivir por s√≠ mismas.        
        # article: es la parte de nuestro contenido que puede vivir por s√≠ mismo. Pueden haber tantos art√≠cle como proyectos o eventos tenga nuestro portafolio.

        # nav: para hacer men√∫s de navegaci√≥n.

        # aside: contenido menos relevante, como publicidad, etc.

        # section: sirve para diferenciar las secciones principales del contenido.

        # header: cabecera del documento.

        # footer: pie de p√°gina del documento.

        # table: tablas de contenidos, similar a la estructura de las hojas de calculo.

        # ul y ol: listas de items.

        # div: es un contenedor cualquiera  sirve para cualquier divisi√≥n para organizar el contenido.

        # h1 a h6: son etiquetas para indicar t√≠tulos con un estilo que destaca del resto.

        # p: define el texto de un p√°rrafo.

        # small: aplica una apariencia de texto reducido en tama√±o.

        # strong: aplica al texto un formato de negritas.

        # a: corresponde a un ancla o enlace a una url interna o externa del documento.

        # img: con esta etiqueta podemos enlazar im√°genes en el documento.

        # figure: le da un contexto sem√°ntico a las im√°genes. Esta etiqueta se usa en las imagenes y con figcaption le damos una descripcion de bajo de la imagen.


    # Tipos de im√°genes para web

        # Lossless (sin p√©rdida):

            # Capturan todos los datos del archivo original.

            # No se pierde nada del archivo original.

            # Puede comprimirse, pero podr√° reconstruir su imagen al estado original

        # Lossy (con p√©rdida):

            # Se aproximan a su imagen original.

            # Podr√≠a reducir la cantidad de colores en su imagen o analizar la imagen en busca de datos innecesarios.

            # Por consiguiente puede reducir su tama√±o, lo que mejora el tiempo de carga de la p√°gina, pero pierde su calidad.

            # Los archivos tipo lossy son mucho m√°s livianos que los archivos tipo lossless, por lo que son ideales para usar en sitios 
                en donde el tama√±o del archivo y la velocidad de descarga son importantes.


    # Formatos de imagen para web

        # GIF (Graphics Interchange Format): Formato de imagen sin p√©rdida, no se puede comprimir

        # PNG 8 (Portable Network Graphics): Formato de imagen sin p√©rdida, uso de colores de 256, se utiliza para logotipos e iconos para la p√°gina.

        # PNG 24 (Portable Network Graphics): Formato de imagen sin p√©rdida, utilizaci√≥n de colores ilimitados, alta calidad, si intentamos comprimir no
             ayudar√° demasiado por la gran cantidad de colores.

        # JPG / JPEG (Photographic Experts Group): Formato de imagen con p√©rdida, perdemos calidad a la hora de comprimirlas, pero llegan a ser √≥ptimas 
            para la carga en la p√°gina web.
        
        # SVG - Vector (Scalable Vector Graphics): Formato de imagen muy ligero sin p√©rdida, con svg no perdemos calidad, ya que est√° compuesta por vectores.

        # WebP: Es un formato gr√°fico en forma de contenedor que sustenta tanto compresi√≥n con p√©rdida como sin ella. ‚Äã‚ÄãFue desarrollado por Google.


# Tama√±os de imagenes

    # ¬øCu√°l es el peso ideal de una imagen para usarla en la web? 
        # 70KB.

    # ¬øCu√°l es el peso m√°ximo de una imagen para usarla en la web?
        # 1MB

    # ¬øQu√© herramientas podemos utilizar para trabajar con im√°genes?
        # TinyPNG: Para mejorar el tama√±o de im√°genes pas√°ndolas por un proceso de compresi√≥n.
        
        # Verexif: Para retirar metadatos de nuestras fotos tomadas desde un celular.

    # ¬øQu√© metadatos puede borrar Verexif?
        # La hora en que se tom√≥ la foto, Lugar desde donde tom√≥.



# CSS: Cascading Style Sheet (Cascading es el nombre del algoritmo que aplica al momento de implementar los estilos)    

    # Es el estandar parea poder estilizar el proyecto, muestra los elementos de html no como cajas si no con otro tipo de figuras,

    # BEM: https://bem-cheat-sheet.9elements.com/  https://en.bem.info/methodology/faq/#why-bem


# Pseudo clases y pseudo elementos

    # Pseudo Clase: Define el estilo de un estado especial de un elemento.  https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes

    # Pseudo Elemento: Define el estilo de una parte especifica de un elemento. https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements

    # Anatom√≠a de una regla en CSS: 

        # Selector: directamente decirle a css que elemento quieres agregarle estilo. (body)

        # Declaracion del Estilo:

            # Propiedad: El estilo que se va aplicar (background-color:)

            # Valor: El valor que se le va a dar a la propiedad. (rgb(0,0,0))

            # Ejeplo : body background-color:rgb(000,0,0);


# Modelo de Caja:

    # Los elementos que se renderizan son simplemente cajas que son contenedores a los caules se le pueden agregar los siguientes estilos:

        # Margin: Puede ser un espacio externo de la caja hacia afuera.

        # Border: Practicamente es la linea que va a definir a cada uno de los elementos, por default viene transparente.

        # Padding: A diferencia del Margin, este es un espacio interno de la caja hacia adentro, sirve para acomodar elementos dentro de la caja.

        # Content: Puede ser el texto, imagen o cualquier elemento que se vaya a ver despues de renderizar.

            # Width: El largo que quieres que tenga.

            # Height: El alto que quieres que tenga.

    
    # '*' Selector Universal 

        # box-sizing: border-box: El navegador hace un calculo automatico Del tamano del Width se va a restar el Paddingy el Border, para tener la dimension justa.
            # No va a recalcular el Margin, este si va a generar un excente. Solo recalcula Padding y Border.
    
    # Tip: Hay una forma de hacer que CSS calcule el tama√±o de un elemento (width o height, por ejemplo), rest√°ndole cierta cantidad.

        # .caja-hijo {width: calc(50% - 20px);}

        # Ejemplo: Imagina que quieres colocar 2 cajas dentro de una caja padre y quieres que cada una tome el 50% de ancho, pero que cada una tenga un margen a la
             izquierda de 10px. Si colocas width de 50% a cada caja y adem√°s le colocas margen, esto har√° que las cajas queden una arriba de la otra, porque al 
            agregarle 20px de espacio en m√°rgenes, vas a hacer que ya no ajuste el 50% a cada caja.




        



        