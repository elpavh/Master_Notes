# Curso Definitivo HTML y CSS  ## Platzi

# HTML: Estructura de los documentos que se visualizan en los navegadores Es el lenguaje con el que clasificamos o etiquetamos cada parte del documento, dej√°ndole saber al navegador qu√© informaci√≥n
    va a visualizar y qu√© valor tiene para nosotros. De esa manera, presentamos: Barras de Navegaci√≥n, Secciones, art√≠culos, listas, t√≠tulos de diferentes tama√±os, audios, videos, im√°genes, entre otros.

# CSS: Es el lenguaje con el que le damos estilos a todo el contenido previamente etiquetado con HTML. Es el encargado o usado para darle todo el aspecto visual de manera profesional, usando est√°ndares de 
    dise√±o de documentos y logrando as√≠ la correcta visualizaci√≥n de textos y recursos audiovisuales en formatos digitales o, en nuestro caso, las p√°ginas web.

# JavaScript: Es lenguaje que se emplea para crear o brindar a las p√°ginas web la capacidad de interactuar con el usuario y los recursos asociados a una p√°gina web, como lo son: bases de datos, servidores de 
    diversa √≠ndole, informaci√≥n derivada de la interacci√≥n de cada p√°gina en s√≠.



# Web Developer Fundamentals.
    # Perfiles de un Web Developer: Frond-end,

# Front-end: Frontend es la parte de un programa o dispositivo a la que un usuario puede acceder directamente. Son todas las tecnolog√≠as de dise√±o y desarrollo web que corren en el navegador y que se encargan 
    de la interactividad con los usuarios. https://www.w3.org/standards/

    # Estandares: HTML: https://devdocs.io/html/ , https://htmlreference.io/  CSS: https://devdocs.io/css/ , https://cssreference.io/ JavaScript: https://devdocs.io/javascript/ 

    # Frameworks de CSS: Bootstrap: https://getbootstrap.com/ , Foundation CSS: https://get.foundation/ , Materialize CSS: https://materializecss.com/ , Tailwind: https://tailwindcss.com/

    # Frameworks de Java Script para Front-end: React JS: https://es.reactjs.org/ , Angular JS: https://angular.io/ , Vue JS: https://vuejs.org/ 

    # Preprocesadores de CSS: Stylus: https://stylus-lang.com/ , SASS: https://sass-lang.com/

    # Compiladores / empaquetadores de JS: BABEL: https://babeljs.io/ , Webpack: https://webpack.js.org/

# Herramientas : Adem√°s de los est√°ndares, frameworks, preprocesadores y librer√≠as que maneja un Frontend Developer, estas herramientas que nos permiten un mejor desarrollo.

    # Mediaqueri: Algunas ideas sobre como deber√≠amos implementar el dise√±o responsive en nuestro sitio.  link: https://mediaqueri.es/

    # Coolors: Paletas de colores. link: https://coolors.co/palettes/trending
    
    # Unsplash: Imagenes gratis (Da los cr√©ditos a los fot√≥grafos üòâ). link: https://unsplash.com/es , https://pixabay.com/es/

    # FontPair: Ver cuales fuentes puedes combinar. Y obviamente Google Fonts para obtener esas fuentes. links: https://www.fontpair.co/fonts/anote , https://fonts.google.com/

    # Icons8: Iconos, vectores, m√∫sica y algunos recursos m√°s‚Ä¶ Link: https://icons8.com/ , https://fontawesome.com/

    # Browserdiet: Optimizar sitios web (Perder peso en la web üòõ). Recuerda que Platzi tiene tambi√©n un curso de Web Performance https://platzi.com/cursos/web-performance/

    # WCAG: Gu√≠a para mejorar la accesibilidad de nuestro sitio. Recuerda que Platzi tiene el curso de accesibilidad web. lnk: http://www.sidar.org/traducciones/wcag20/es/

    # Practica Jugando: Grid Layout: https://cssgridgarden.com/#es ,Flexbox https://flexboxfroggy.com/#es , https://flukeout.github.io/ , http://www.flexboxdefense.com/ , https://www.w3schools.com/ , https://css-tricks.com/



# Back-end:  programaci√≥n corresponde al lado opuesto a un Front-end en un sitio web o aplicaci√≥n, ya que el Backend trabaja en el lado del servidor, mientras el Frontend lo hace en el lado del cliente. Es el responsable de 
    manejar toda la l√≥gica que existe detr√°s de una petici√≥n dada por el navegador hacia el servidor. Existen programadores que manejan ambas especialidades y se les conoce como full stack.

    # Lenguajes de programacion: Node.js, Python, PHP, Ruby, GO, Java, .NET

    # Frameworks: Django (Python), Lavarel (PHP), Rails (Ruby), Express (JavaScript), Spring (Java)   

    # El Backend tambi√©n tiene en cuenta la infraestructura donde va a realizarse el deploy de su aplicaci√≥n (esto tambi√©n puede ser tarea de un DevOps, un perfil dedicado a la infraestructura), con tecnolog√≠as como:
        Google Cloud, DigitalOcean, AWS, Heroku, entre otras.
    
    # ¬øQu√© es deploy?: Deploy es un t√©rmino famoso entre los desarrolladores web. Puede significar muchas cosas, dependiendo del ambiente y de la tecnolog√≠a usada. Sin embargo, los significados que m√°s se refieren a la 
        pr√°ctica y pueden resumir su funci√≥n son: implantar, colocar en posici√≥n, habilitar para uso o, simplemente, publicar.
    
    # bases de datos: Bases de datos relacionales (como MySQL) y Bases de datos no relacionales (como mongoDB).



# Full Stack: es un t√©rmino utilizado para describir a los desarrolladores que conocen tanto los lenguajes de frontend como de backend. Principalmente, el desarrollo full stack se refiere al uso de JavaScript en el backend
     y de HTML/CSS/JavaScript en el frontend para crear nuevas plataformas.

    # Tecnolog√≠as Full Stack para desarrolladores: LAMP (Linux, Apache, MySQL, PHP) , MERN (MongoDB, Express.js, React, Node) , PERN (PostgreSQL, Express.js, React, Node)



# Pagina Estaticas vs Dinamicas.

    # Sitos Web Est√°ticos: La informaci√≥n que contiene se mantiene constante y est√°tica. No se actualiza con la interacci√≥n del usuario. Es conveniente para realizar landing pages (p√°ginas informativas o de aterrizaje) 
        o blogs. Se mostrar√°n siempre iguales para todos los usuarios. Ejemplos: Men√∫ de un restaurante, Blog de viajes, P√°gina informativa de un negocio.

    # Sitios Web Din√°micos: Tambi√©n conocidos como aplicaciones web, actualizan su informaci√≥n con respecto a la interacci√≥n del usuario. Dependen de una base de datos, de donde extrae e ingresa informaci√≥n. Ser√°n diferentes,
         dependiendo del usuario que la use y la informaci√≥n que se ingrese. Ejemplos: Sistema de reporte de ventas, Linkedin, Banca en l√≠nea



# HTML: anatom√≠a de una p√°gina web

    # Estructura b√°sica de HTML en una p√°gina Web

        # Container: contenedor principal

        # Header: cabecera de la p√°gina. Aqu√≠ usualmente encuentras el logo y el men√∫ de navegaci√≥n del sitio.

        # Main content: estructura principal. Por ejemplo, el feed o lista de publicaciones de una red social.

        # Sidebar: contenido secundario de una p√°gina, que usualmente se encuentra a los lados del contenido principal (o main).

        # Footer: pie de p√°gina. Esto se encuentra al fondo del sitio web, salvo en casos de sitios web donde el scroll (o navegaci√≥n hacia abajo) es infinito, por ende, no tendr√≠a sentido ponerlo al fondo.

